generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  firstName           String
  lastName            String
  email               String?            @unique
  password            String
  bio                 String?
  profilePic          String?
  createdAt           DateTime           @default(now())
  username            String?            @unique
  isEmailVerified     Boolean            @default(false)
  isPhoneVerified     Boolean            @default(false)
  phoneNumber         String?            @unique
  updatedAt           DateTime           @updatedAt
  coffeePersonality   String?
  conversationTopics  String?
  groupPreference     String?
  locationPreference  String?
  meetingFrequency    String?
  onboardingCompleted Boolean            @default(false)
  socialGoals         String?
  timePreference      String?
  ageRange            String?
  socialEnergy        String?
  invites             Invite[]           @relation("HostInvites")
  requests            Request[]
  preferences         UserPreferences[]
  verificationCodes   VerificationCode[]
}

model UserPreferences {
  id          String   @id @default(uuid())
  userId      String
  preferences Json
  completedAt DateTime @default(now())
  version     Int      @default(1)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationCode {
  id        String               @id @default(uuid())
  code      String
  type      VerificationCodeType
  purpose   VerificationPurpose
  userId    String
  expiresAt DateTime
  verified  Boolean              @default(false)
  attempts  Int                  @default(0)
  createdAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invite {
  id          String    @id @default(uuid())
  title       String
  description String
  time        DateTime
  location    String
  open        Boolean
  hostId      String
  createdAt   DateTime  @default(now())
  host        User      @relation("HostInvites", fields: [hostId], references: [id])
  requests    Request[]
}

model Request {
  id        String   @id @default(uuid())
  status    String
  userId    String
  inviteId  String
  createdAt DateTime @default(now())
  invite    Invite   @relation(fields: [inviteId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum VerificationCodeType {
  EMAIL
  SMS
}

enum VerificationPurpose {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
}
